import numpy as np
import math
import csv

OUTPUT_ALPHABET = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ #0123456789'
ALPHABET = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
UNKNOWN_SYMBOL_NUMBER = 26
global_english_frequencies = [
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015, 0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749, 0.07507,
    0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758, 0.00978, 0.0236, 0.0015, 0.01974, 0.00074]
global_english_digraph_frequencies = [0.00039803239807310176, 0.002029445518441609, 0.004140646019086559, 0.0034405166367435383, 0.00018870001483253996, 0.0013187785199617543, 0.0020372352972668983, 0.0005146170623011168, 0.003231846814847664, 0.0002012572289530235, 0.0011880571323692015, 0.008836830184180957, 0.0036946134220110184, 0.016136243079947415, 0.00017334501113159254, 0.001978181771203139, 7.286278455427354e-05, 0.009794636726918318, 0.008735606073905992, 0.011164000013278053, 0.001129515154540852, 0.00191689172480274, 0.0009063006657509358, 0.00015282295398409983, 0.0026649109948876704, 0.00017769108978803644, 0.002050693502311955, 0.00015937502659062186, 7.409124035287036e-05, 3.2781638999001434e-05, 0.004502292583201862, 1.7425941516541255e-05, 9.369750590351755e-06, 3.572720404168359e-05, 0.0010074775988830336, 6.535606858619135e-05, 6.242414791326018e-06, 0.0016051893354886344, 4.4357383539431316e-05, 2.4542521013947084e-05, 0.001889952188662201, 2.663219093038549e-05, 1.2749391599518517e-06, 0.0010686732909976969, 0.0003260014575526296, 9.904332371985113e-05, 0.0018762791426086922, 2.776999261131477e-05, 3.2420178830852556e-05, 6.986379833510873e-07, 0.0012099720715338155, 1.880610420592864e-06, 0.0046091962202008, 6.892788707439312e-05, 0.0006999080660404499, 8.289185884225322e-05, 0.004579794915992478, 6.189224875347616e-05, 4.199459496746903e-05, 0.004655909917018074, 0.0019532456448109517, 9.603323699648213e-06, 0.0016662529778553687, 0.0013143006228178858, 6.612709110737392e-05, 4.3487612782932326e-05, 0.0061832354595479444, 8.855496607042317e-05, 3.643416740318782e-05, 0.0012752506678510819, 0.0003195113627612476, 0.00274939878246978, 0.0010647337683077315, 2.1790289752821203e-05, 5.949245850083325e-05, 1.2256806725457672e-06, 0.00026486635569008074, 1.3393220843361428e-05, 0.004066497426128634, 0.001412242915276984, 0.0008747384633908653, 0.0009253368741585971, 0.006250933272000211, 0.0009328766603787876, 0.0005647702965981599, 0.0010605063262899698, 0.005012339706678417, 0.0001848617842434377, 0.00012158382254847205, 0.0007055630791509709, 0.0008197965178322364, 0.0006569005500643486, 0.0030342122816937782, 0.0007273242300802561, 6.551933850219463e-05, 0.0013186194127348277, 0.0024120209269313875, 0.003644589924856862, 0.0013554897374490383, 0.0002864311664512544, 0.0011347522799201861, 6.339544203112663e-06, 0.0005129450488553611, 2.2672317316045648e-05, 0.010020473709826474, 0.0022521993363070515, 0.005960924043027139, 0.010787830752016612, 0.004277843394579735, 0.0030647166985073916, 0.001916331611861437, 0.0017481307593864685, 0.0037063924445346875, 0.00029069283502364555, 0.0005577168512184154, 0.005340324916836537, 0.004196289840275599, 0.011329747191802887, 0.003127610073983783, 0.0032432844968670544, 0.00033797242629482943, 0.017838136076634363, 0.013198141738779546, 0.007602122951633152, 0.0008496811564944489, 0.0024453511158464792, 0.0034171991026206243, 0.001306474536093429, 0.0017410081671159522, 0.00010764390187305436, 0.0019328588750584475, 0.00020539517315563884, 0.00036326191873751665, 0.00017298910121554578, 0.001972487675067399, 0.0014073401925868009, 0.00014748823667197044, 0.0003486492612552243, 0.002773699867517286, 6.240911598048367e-05, 5.293668572624318e-05, 0.000668536884856893, 0.00028937904409897906, 0.0001235768255741323, 0.004376321055106181, 0.00027747675972654266, 1.0985798994078137e-05, 0.0019285682989230244, 0.0004734864565775405, 0.0031673619045809974, 0.0007259035968026243, 5.658597648337001e-05, 0.00023262563501052922, 4.466334118655925e-06, 0.00018268677920092957, 7.212090085662698e-06, 0.00259931904058714, 0.00027389962224674304, 0.0003005325069586413, 0.00020346114155856332, 0.0033359380928543697, 0.000338863704278224, 0.0003395565607489687, 0.0022849460549699105, 0.0016426757381861775, 4.092085244621809e-05, 3.788740841191944e-05, 0.0005959090609749415, 0.00027254304812878956, 0.0005611371940763308, 0.0018937247412680951, 0.0002810286898113786, 1.3817815129171621e-05, 0.0016165023680962318, 0.0009066972775157312, 0.0016992998726527494, 0.0008714890220455935, 4.319414320303411e-05, 0.00036261438932560564, 3.4175677318644052e-06, 0.0002265899671100062, 6.594162018296227e-06, 0.008318866088601775, 0.0002344990763554902, 0.0003332595684786388, 0.0001916582992029561, 0.0232854497343354, 0.000192936938530976, 9.93511314510131e-05, 0.0003075760081367029, 0.0063585866555539395, 4.391775732084462e-05, 4.865374118746061e-05, 0.00027045175938882136, 0.00031289569351605577, 0.0003200548249462443, 0.004562544501198666, 0.00022632286122759292, 2.3413044711170948e-05, 0.0008887343491083124, 0.0005693693742462576, 0.001931383895562316, 0.0006410148035061384, 4.568296874981478e-05, 0.00032451005856069603, 1.7404665550149893e-06, 0.00033450698763858445, 8.571901850675737e-06, 0.0023130703386737422, 0.0006009174697155686, 0.004964795784650871, 0.0029825174648753787, 0.0028920388739305716, 0.0013275310362662524, 0.0022040453490692834, 0.0001412268585192956, 0.00014040380238465591, 5.067565177615262e-05, 0.0005978370797989063, 0.004134382790849851, 0.00243850834878611, 0.020275533912479046, 0.0049050722969062885, 0.0007744037810152603, 6.744365715809148e-05, 0.002701435585148022, 0.00863757543993427, 0.008773684503494425, 0.0001333640013746624, 0.002111230795771007, 0.00021323582929186368, 0.00020336123702072563, 2.274701445891966e-05, 0.0004314863113579693, 0.00039609443504745395, 4.481828572440937e-06, 5.728322690369557e-06, 5.065298824673574e-06, 0.00034396484848105694, 2.923132773769528e-06, 2.7804450426448604e-06, 4.847220169162129e-06, 8.269343732960336e-05, 3.7198252109242765e-06, 3.2300154629144775e-06, 2.8095838661808537e-06, 5.1658971440240275e-06, 3.3421768074776277e-06, 0.0006293396169488794, 7.983112606845262e-06, 1.6697008407132905e-07, 1.8609764037817064e-05, 9.094550590289593e-06, 4.7195643708139654e-06, 0.0006763941917494241, 2.064000000466221e-06, 3.719362689915769e-06, 1.72751596677677e-07, 1.3235038658451746e-06, 6.611737816619525e-07, 0.0006551697964505124, 0.00010588493447769906, 9.713334321521803e-05, 6.428625749351273e-05, 0.0024630793148420803, 0.00012426598187680897, 4.8394960683200476e-05, 0.00015034129751295103, 0.0013446311317323, 1.7764506894768992e-05, 2.747629177091229e-05, 0.00019571784609462937, 0.00011230403229427506, 0.0004402820733767629, 0.00040655619773889267, 8.687370220449718e-05, 3.2156773116507347e-06, 0.00011725370086682168, 0.000746354656975311, 0.00033393669923509426, 0.0001171607341441116, 1.692456874331876e-05, 0.00016642269045776, 1.175497143122667e-06, 0.000127955511961676, 2.588267563609854e-06, 0.005360229277177168, 0.0005697548855068488, 0.0005383890233148899, 0.0023693977659133563, 0.007026448490998915, 0.0006249866004773079, 0.00021425638189713622, 0.00029463698292369613, 0.005386327487603231, 5.0498506229894114e-05, 0.00026923024140535217, 0.005697536135740754, 0.0005125921453258696, 0.00017398097751829082, 0.003606810515100429, 0.0005883167786202853, 1.7841285382181293e-05, 0.0003480683348685385, 0.0020062894041506644, 0.0015765659916166226, 0.0010182261245997473, 0.00028636687603107177, 0.000424781838079144, 3.576906219295355e-06, 0.0031779890185329777, 1.3254464540809076e-05, 0.005048041703325137, 0.0009532012210556475, 0.0002547859415701567, 0.00011126544136967071, 0.006299011868313592, 0.0001653713802054217, 6.59400013594325e-05, 0.00016439476709595742, 0.002814196125677694, 3.104972908264384e-05, 2.5679397652859347e-05, 0.00011066462657961904, 0.0008627191612032764, 0.00012913517179387524, 0.0029950011381555093, 0.0018119658276361818, 4.939261849855188e-06, 0.00015277508305971927, 0.0009072014254150048, 0.0007067196129327448, 0.0008685760647340111, 3.1524044376868626e-05, 0.00021683470525906318, 3.295462185618336e-06, 0.0004507565553959356, 4.225360673223342e-06, 0.005445612274171245, 0.0008331603685915576, 0.003518541387013264, 0.010682918499219806, 0.006320736942604214, 0.0011448165058048124, 0.008919108277644921, 0.0009054796909608344, 0.004035982371331825, 0.00031052157317938505, 0.0007037719665455243, 0.0008540415733021567, 0.0008780794838958217, 0.0011981373152286214, 0.004369461637289505, 0.0006864103154491656, 5.0281121355895434e-05, 0.0005535405177720939, 0.004927333664306275, 0.011725158252060271, 0.0008632034206991841, 0.0005075090394423684, 0.0009749866543378793, 1.7308461180380262e-05, 0.001004431435521001, 6.162190522400334e-05, 0.001515732453451621, 0.0014367086578035188, 0.0017684379755255094, 0.001759941927120229, 0.0006050487073635606, 0.0070629048594105116, 0.0009627666180325981, 0.0007526740815145536, 0.0012341485071695286, 0.00015288215667318884, 0.0007857237514379853, 0.003174395230296872, 0.004871769859251708, 0.013162249877258834, 0.002351654766245483, 0.0024188588375211673, 2.837034488035794e-05, 0.010574430727766728, 0.0031442790998699012, 0.004645572109956916, 0.007195042486331116, 0.0016997679439133594, 0.0033788151779060717, 0.00015033736608437872, 0.0004470015785883647, 5.285597581025856e-05, 0.0027910157290338025, 8.541282959912518e-05, 9.257542993687754e-05, 6.317158186300885e-05, 0.003601493373586623, 9.670574254285253e-05, 4.882672404464254e-05, 0.0006533904781307827, 0.0012856257078534253, 1.087918790161708e-05, 1.919855328164754e-05, 0.002269180332613408, 0.0002153555630738551, 3.044428908250708e-05, 0.0027560551535637206, 0.0011270233226075158, 4.303064202652658e-06, 0.003050599401025211, 0.0005497145439897171, 0.0008816748909554573, 0.0008922372519662465, 1.1124786557134741e-05, 0.00012266311532182507, 1.5758090759861996e-06, 9.161315497867699e-05, 2.242533109750246e-06, 1.7003891096277855e-05, 6.315030589661748e-06, 2.466855798876547e-06, 2.0068786559155033e-06, 1.3921882356085885e-06, 2.030004706340895e-06, 5.936457144198084e-07, 2.8382601687083397e-06, 1.6971514625682306e-05, 3.103515967087584e-07, 4.678400001056768e-07, 2.220794622350378e-06, 2.8479731098870043e-06, 8.806400001989211e-07, 2.172461176961309e-06, 1.401901176787253e-06, 5.779200001305419e-07, 1.381781512917162e-06, 4.821087732181436e-06, 3.911540168950775e-06, 0.0009642230966883892, 9.74069243917504e-07, 8.017570421979094e-06, 1.7691428575424752e-07, 1.053854117885106e-06, 6.475294119109714e-08, 0.006624590581664445, 0.0007738466744605126, 0.0016128253260785945, 0.0020872733638328225, 0.014089222456964019, 0.0007946647450534503, 0.0010744219646124408, 0.0006865444465416329, 0.006390801475057014, 0.00011982924910269757, 0.001038683428806049, 0.0011108010920156163, 0.0017062374565198627, 0.0016337710524698804, 0.006759922609930308, 0.0008298061662378588, 3.6292404714080165e-05, 0.0013635609603080043, 0.004911339225311066, 0.004961939023641823, 0.0012327472997742542, 0.0006226561883759411, 0.0007742613245446399, 8.93914353143096e-06, 0.002032441960795227, 2.6232341518530465e-05, 0.0069563462630839205, 0.0012843477623069182, 0.0024977605276230237, 0.0008885606724696177, 0.00729216912299171, 0.0014046751465357787, 0.0004726432807790307, 0.0038789618079350125, 0.005957002558656506, 0.00016290961213763874, 0.0005369609897011219, 0.0011482111787467556, 0.001290608215417576, 0.00096157886408275, 0.005527965758559595, 0.00244456829903958, 0.00018508841953760653, 0.0008126050099314522, 0.004374453395273826, 0.012492322191729358, 0.0023197752744735763, 0.00020399095937380905, 0.0020057764683522293, 1.1788504204343487e-05, 0.0005120731967543238, 1.846383865963284e-05, 0.006046905542206225, 0.000882364972300151, 0.0012018185199353351, 0.0005426564733998874, 0.009781351042209434, 0.0007789899080751198, 0.00035383897823118647, 0.027056980400061274, 0.009918454525937884, 0.00012938400809645246, 0.00014114591734280674, 0.0012495321871730035, 0.0008695073507846416, 0.00041213373858048867, 0.010664621630644244, 0.0007100684962948457, 3.67960900923452e-05, 0.0036588247026752034, 0.004376031979475863, 0.004478931340843644, 0.0019605097685100716, 0.00016145452104487308, 0.002060589833070493, 6.511370757773325e-06, 0.0018521464152082832, 6.475456001462691e-05, 0.0010614850207439723, 0.0006916696418369083, 0.0013279868507201369, 0.0008093042287542361, 0.0011396140695011162, 0.00016231989785179125, 0.001117525916218816, 7.847617077402891e-05, 0.0008051292828709401, 2.0389776139059473e-05, 0.0001190697896067277, 0.002352721339691102, 0.0010151688607335104, 0.0035238779544094273, 0.00015029758927764705, 0.0012272874705293235, 5.408258152482134e-06, 0.0040104542180487476, 0.0036306402912402655, 0.003500629335916781, 1.4579355969679774e-05, 4.9039021187547636e-05, 8.157298018649313e-05, 3.348975866302693e-05, 0.0001230213378429144, 3.5553064881980387e-05, 0.0009507986556769535, 6.750956640180384e-06, 1.3649920003083275e-05, 1.9798443029682204e-05, 0.006780783001195525, 6.496107564492566e-06, 5.916800001336501e-06, 6.984761009981095e-06, 0.0021692320865404112, 2.6437700846307946e-06, 2.6523267232881895e-06, 1.1339165044578123e-05, 8.099667900989235e-06, 7.650560001728127e-06, 0.0005210974441513202, 1.4471588574697448e-05, 3.4411563032983046e-07, 2.229721277814579e-05, 4.719865009469496e-05, 1.4549060843622511e-05, 1.9155307567352055e-05, 5.163815799485743e-06, 1.0547329078012708e-05, 7.381835295785074e-07, 5.390266085251179e-05, 6.08908907700567e-07, 0.0038941479914678546, 9.130627228953204e-05, 0.00010369582254443145, 0.00010005393212344076, 0.0030491965748064066, 7.775278791672264e-05, 3.2351031940080635e-05, 0.002741109712215807, 0.0035181702139039364, 2.299538824048837e-05, 3.4449489755680694e-05, 0.0001521189970091509, 0.00011694543061465121, 0.0008440118052326642, 0.002106007777282433, 7.440714220168121e-05, 3.7568268916049035e-06, 0.0002836999798960156, 0.00045991400884338226, 0.00030093767536209414, 4.1831325051465765e-05, 1.4784484036953e-05, 0.00015601064877473586, 1.08183663889983e-06, 0.00012803668439866913, 1.221888000276003e-05, 0.00020909372240017176, 2.1747969080542734e-05, 0.00016141867566671372, 1.3898987566164746e-05, 0.00015123211297533713, 2.6139606056324644e-05, 9.085993951632197e-06, 3.852776874819854e-05, 0.00023698096408714326, 2.458067899714898e-06, 3.156937143570239e-06, 1.3779657145969725e-05, 2.9483864208340556e-05, 8.0326023547556e-06, 4.88359744648127e-05, 0.00042568028513817046, 1.2525068910392216e-06, 2.082408336604833e-05, 3.5694365050079535e-05, 0.0003491961923477848, 3.4118555974093337e-05, 7.1961331108691766e-06, 2.7594465888586045e-05, 8.106143195108345e-06, 2.1814572105767862e-05, 4.81484369856658e-07, 0.001674221521050446, 0.0006236600902249075, 0.000723395114112982, 0.0004908127248167483, 0.0015030325516000127, 0.0005331118898683197, 0.00024261123232370915, 0.0005298809493633882, 0.00103170259922464, 8.757349649036954e-05, 9.064324842383606e-05, 0.00046574454867663205, 0.0005819145628205199, 0.00034357332444735506, 0.002101810399130224, 0.0005970829392945344, 2.034005513064488e-05, 0.00046759463271066337, 0.001743616554343432, 0.00155271794589695, 0.00016084445583465124, 9.516069111393209e-05, 0.0007814440445462624, 3.918709244582646e-06, 7.700350388293995e-05, 1.8103303533500983e-05, 0.00021486852845189634, 1.1713807061469471e-05, 9.490237313068047e-06, 7.6098581529794365e-06, 0.0003954256296691516, 6.627463530908792e-06, 6.0981082366715725e-06, 2.4892649417387516e-05, 0.0001489398588571723, 1.6574440339878327e-06, 5.6108423542085664e-06, 1.850985949997937e-05, 1.0645846052824878e-05, 5.605985883619234e-06, 9.805815397172944e-05, 7.027775463772324e-06, 1.3350668910578706e-06, 7.558749581539321e-06, 2.1968129080592464e-05, 1.317144201978192e-05, 2.625685513198138e-05, 3.316044370496935e-06, 1.5925754625446086e-05, 5.695946219774008e-07, 2.448378084586659e-05, 5.1172168078785784e-05]
global_logdi = [[4,7,8,7,4,6,7,5,7,3,6,8,7,9,3,7,3,9,8,9,6,7,6,5,7,4],[7,4,2,0,8,1,1,1,6,3,0,7,2,1,7,1,0,6,5,3,7,1,2,0,6,0],[8,2,5,2,7,3,2,8,7,2,7,6,2,1,8,2,2,6,4,7,6,1,3,0,4,0],[7,6,5,6,8,6,5,5,8,4,3,6,6,5,7,5,3,6,7,7,6,5,6,0,6,2],[9,7,8,8,8,7,6,6,7,4,5,8,7,9,7,7,5,9,9,8,5,7,7,6,7,3],[7,4,5,3,7,6,4,4,7,2,2,6,5,3,8,4,0,7,5,7,6,2,4,0,5,0],[7,5,5,4,7,5,5,7,7,3,2,6,5,5,7,5,2,7,6,6,6,3,5,0,5,1],[8,5,4,4,9,4,3,4,8,3,1,5,5,4,8,4,2,6,5,7,6,2,5,0,5,0],[7,5,8,7,7,7,7,4,4,2,5,8,7,9,7,6,4,7,8,8,4,7,3,5,0,5],[5,0,0,0,4,0,0,0,3,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0],[5,4,3,2,7,4,2,4,6,2,2,4,3,6,5,3,1,3,6,5,3,0,4,0,5,0],[8,5,5,7,8,5,4,4,8,2,5,8,5,4,8,5,2,4,6,6,6,5,5,0,7,1],[8,6,4,3,8,4,2,4,7,1,0,4,6,4,7,6,1,3,6,5,6,1,4,0,6,0],[8,6,7,8,8,6,9,6,8,4,6,6,5,6,8,5,3,5,8,9,6,5,6,3,6,2],[6,6,7,7,6,8,6,6,6,3,6,7,8,9,7,7,3,9,7,8,9,6,8,4,5,3],[7,3,3,3,7,3,2,6,7,2,1,7,3,2,7,6,0,7,6,6,6,0,3,0,4,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0],[8,6,6,7,9,6,6,5,8,3,6,6,6,6,8,6,3,6,8,8,6,5,6,0,7,1],[8,6,7,6,8,6,5,7,8,4,6,6,6,6,8,7,4,5,8,9,7,4,7,0,6,2],[8,6,6,5,8,6,5,9,8,3,3,6,6,5,9,6,2,7,8,8,7,4,7,0,7,2],[6,6,7,6,6,4,6,4,6,2,3,7,7,8,5,6,0,8,8,8,3,3,4,3,4,3],[6,1,0,0,8,0,0,0,7,0,0,0,0,0,5,0,0,0,1,0,2,1,0,0,3,0],[7,3,3,4,7,3,2,8,7,2,2,4,4,6,7,3,0,5,5,5,2,1,4,0,3,1],[4,1,4,2,4,2,0,3,5,1,0,1,1,0,3,5,0,1,2,5,2,0,2,2,3,0],[6,6,6,6,6,6,5,5,6,3,3,5,6,5,8,6,3,5,7,6,4,3,6,2,4,2],[4,0,0,0,5,0,0,0,3,0,0,2,0,0,3,0,0,0,1,0,2,0,0,0,4,4]]
global_sdd = [[0,3,4,2,0,0,1,0,0,0,4,5,2,6,0,2,0,4,4,3,0,6,0,0,3,5],[0,0,0,0,6,0,0,0,0,9,0,7,0,0,0,0,0,0,0,0,7,0,0,0,7,0],[3,0,0,0,2,0,0,6,0,0,8,0,0,0,6,0,5,0,0,0,3,0,0,0,0,0],[1,6,0,0,1,0,0,0,4,4,0,0,0,0,0,0,0,0,0,1,0,0,4,0,1,0],[0,0,4,5,0,0,0,0,0,3,0,0,3,2,0,3,6,5,4,0,0,4,3,8,0,0],[3,0,0,0,0,5,0,0,2,1,0,0,0,0,5,0,0,2,0,4,1,0,0,0,0,0],[2,0,0,0,1,0,0,6,1,0,0,0,0,0,2,0,0,1,0,0,2,0,0,0,0,0],[5,0,0,0,7,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,5,0,0,0,4,0,0,0,1,1,3,7,0,0,0,0,5,3,0,5,0,0,0,8],[0,0,0,0,6,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,9,0,0,0,0,0],[0,0,0,0,6,0,0,0,5,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0],[2,0,0,4,2,0,0,0,3,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,7,0],[5,5,0,0,5,0,0,0,2,0,0,0,0,0,2,6,0,0,0,0,2,0,0,0,6,0],[0,0,4,7,0,0,8,0,0,2,2,0,0,0,0,0,3,0,0,4,0,0,0,0,0,0],[0,2,0,0,0,8,0,0,0,0,4,0,5,5,0,2,0,4,0,0,7,4,5,0,0,0],[3,0,0,0,3,0,0,0,0,0,0,5,0,0,5,7,0,6,0,0,3,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0],[1,0,0,0,4,0,0,0,2,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,5,0],[1,1,0,0,0,0,0,1,2,0,0,0,0,0,1,4,4,0,1,4,2,0,4,0,0,0],[0,0,0,0,0,0,0,8,3,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0],[0,4,3,0,0,0,5,0,0,0,0,6,2,3,0,6,0,6,5,3,0,0,0,0,0,6],[0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,0,0,0,2,0,0,6,6,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],[3,0,7,0,1,0,0,0,2,0,0,0,0,0,0,9,0,0,0,5,0,0,0,6,0,0],[1,6,2,0,0,2,0,0,0,6,0,0,2,0,6,2,1,0,2,1,0,0,6,0,0,0],[2,0,0,0,8,0,0,0,0,6,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,9]]

def calculate_index_of_coincidence(text):
    n = [0]*len(OUTPUT_ALPHABET)
    for p in text:
        n[p] = n[p] + 1
    coindex = 0
    for i in range(0, len(OUTPUT_ALPHABET)):
        coindex = coindex + n[i] * (n[i] - 1) / len(text) / (len(text) - 1)
    return coindex

def calculate_digraphic_index_of_coincidence(text):
    pair_number = len(OUTPUT_ALPHABET) * len(OUTPUT_ALPHABET)
    n = [0]*pair_number
    for i in range(1, len(text), 1):
        p0, p1 = text[i-1], text[i]
        n[p0 * len(OUTPUT_ALPHABET) + p1] += 1
    coindex = 0
    for i in np.nonzero(np.array(n))[0]:
        coindex += n[i] * (n[i] - 1) / (len(text) - 1) / (len(text) - 2)
    return coindex

def calculate_frequencies(text, size, recursive=True):
    before = []
    if recursive is True and size > 1:
        before = calculate_frequencies(text, size-1, recursive)
    frequencies_size = int(math.pow(len(OUTPUT_ALPHABET), size))
    frequencies = [0]*frequencies_size
    for p in range(len(text) - (size-1)):
        pos = 0
        for i in range(size):
            pos += text[p + i] * int(math.pow(len(OUTPUT_ALPHABET), i))
        frequencies[pos] += 1
    for f in np.nonzero(np.array(frequencies))[0]:
        frequencies[f] = frequencies[f] / len(text)
    return before + frequencies

def map_text_into_numspace(text, alphabet, unknown_symbol_number):
    array = []
    for c in text:
        if bytes([c]) in alphabet:
            array.append(alphabet.index(bytes([c])))
        else:
            array.append(unknown_symbol_number)
    return np.array(array)



def has_hash(text):
    return int(OUTPUT_ALPHABET.index(b'#') in text)


def has_space(text):
    return int(OUTPUT_ALPHABET.index(b' ') in text)


def has_letter_x(text):
    return int(OUTPUT_ALPHABET.index(b'X') in text)


def has_digit_0(text):
    return int(OUTPUT_ALPHABET.index(b'0') in text)

def has_letter_j(text):
    return int(OUTPUT_ALPHABET.index(b'J') in text)

def calculate_maximum_index_of_coincidence(text):
    """calculates the maximum IoC for periods 1-15. It is calculated by taking every p-th letter of the ciphertext.
    :see: https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC-Len.html
    :param text: input numbers-ciphertext
    :return: mic"""
    iocs = []
    for i in range(1, 16, 1):
        avg = 0
        for j in range(i):
            txt = []
            for k in range(j, len(text), i):
                txt.append(text[k])
            avg += calculate_index_of_coincidence(txt)
        iocs.append(avg / i)
    return max(iocs)

def calculate_max_kappa(text):
    """calculates the maximum kappa for periods 1-15. It is calculated shifting the ciphertext by p and finding calculating the percentage
    of coinciding characters.
    :param text: input numbers-ciphertext
    :return: mka"""
    mka = []
    for i in range(1, 16, 1):
        shifted_text = []
        for j in range(len(text)-i):
            shifted_text.append(text[(j+i) % len(text)])
        shifted_text += [-1]*i
        mka.append(np.count_nonzero(np.array(shifted_text) == text) / (len(text)-i))
    return max(mka)

def calculate_log_digraph_score(text):
    """calculates the log digraph score by averaging all digraph frequencies in the text.
    :param text: input numbers-ciphertext
    :return: ldi"""
    if np.count_nonzero(np.array(text) > 25) > 0:
        return 0
    logdi = global_logdi
    score = 0
    for i in range(len(text)-1):
        if text[i] > 25 or text[i+1] > 26:
            continue
        score += logdi[text[i]][text[i+1]]
    score = score / 10 / (len(text) - 1)
    return score

def calculate_rod_lr(text):
    """calculates the percentage of odd-spaced repeats to all repeats and long repeats.
    :param text: input numbers-ciphertext
    :return: rod, lr"""
    lr = 0
    sum_all = 0
    sum_odd = 0
    for i, c in enumerate(text):
        rep = 0
        for j in range(i+1, len(text), 1):
            if c == text[j]:
                rep += 1
                sum_all += 1
                if (j - i) % 2 == 1:
                    sum_odd += 1
        if rep == 3:
            lr += 1
    lr = math.sqrt(lr) / len(text)
    rod = sum_odd / sum_all
    return rod, lr

def calculate_nic(text):
    """calculates the maximum Nicodemus IC for periods 3-15.
    :param text: input numbers-ciphertext
    :return: nic"""
    nics = []
    col_len = 5
    for i in range(1, 16, 1):
        ct = [[0] * len(OUTPUT_ALPHABET) for i in range(16)]
        block_len = len(text) // (col_len*i)
        limit = block_len * col_len * i
        index = 0
        for j in range(limit):
            ct[index][text[j]] += 1
            if (j + 1) % col_len == 0:
                index = (index + 1) % i
        z = 0
        for j in range(i):
            x = 0
            y = 0
            for k in range(len(OUTPUT_ALPHABET)):
                x += ct[j][k] * (ct[j][k] - 1)
                y += ct[j][k]
            if y > 1:
                z += x / (y * (y - 1))
        z = z / i
        nics.append(z)
    return max(nics[2:])


def calculate_sdd(text):
    """calculates the average English single letter - digraph discrepancy score.
    :param text: input numbers-ciphertext
    :return: sdd"""
    sdd = global_sdd
    text = list(text)
    score = 0
    for i in range(len(text)-1):
        if text[i] > 25 or text[i+1] > 25:
            continue
        score += sdd[text[i]][text[i+1]]
    score = score / (len(text)-1) / 10
    return score


# def calculate_ldi_stats(text):
    """calculates the LDI for Autokey, Beaufort, Porta, Slidefair and Vigenere.
    :param text: input numbers-ciphertext
    :return: a_ldi, b_ldi, p_ldi, s_ldi, v_ldi"""
    if np.count_nonzero(np.array(text) > 25) > 0:
        return [0, 0, 0, 0, 0]
    return ctx.call("get_vig_values", text)


# def calculate_ptx(text):
    if np.count_nonzero(np.array(text) > 25) > 0:
        return 0
    return ctx.call("calc_portax_logdi", text)


def calculate_phic(text):
    """calculates the Phillips IC.
    :param text: input numbers-ciphertext
    :return: phic"""
    if np.count_nonzero(np.array(text) > 25) > 0:
        return 0
    combine_alpha = [0,1,2,3,0,4,5,1]
    period = 8
    col_len = 5
    ct = [[0]*26 for _ in range(period-1)]
    block_len = len(text) // (col_len*period)
    limit = block_len*col_len*period
    index = 0
    for i in range(limit):
        ct[combine_alpha[index]][text[i]] += 1
        if (i+1) % col_len == 0:
            index = (index + 1) % period
    z = 0
    for i in range(period - 2):
        x = 0
        y = 0
        for j in range(26):
            x += ct[i][j]*(ct[i][j]-1)
            y += ct[i][j]
        if y > 1:
            z += x / (y * (y - 1))
    z /= (period-2)
    return z*10

def calculate_bdi(text):
    """calculates Max Bifid DIC for periods 3-15.
    :param text: input numbers-ciphertext
    :return: bdi"""
    if np.count_nonzero(np.array(text) > 25) > 0:
        return 0
    best_score = 0
    normalizer = 25*25
    text_len = len(text)
    for period in range(3, 16, 1):
        numb = 0
        freq = [0] * 676
        for i in range(0, text_len, period):
            if i + period < text_len:
                limit = i + period
                second_row = period // 2
            else:
                limit = text_len
                second_row = (text_len-i) // 2
            for j in range(i, limit-second_row, 1):
                freq[text[j]+26*text[j+second_row]] += 1
            numb += limit - second_row - i
        sum_ = 0
        for i in np.nonzero(np.array(freq))[0]:
            sum_ += freq[i] * (freq[i] - 1)
        score = 100*normalizer * sum_ // (numb*(numb-1)) / 1000
        best_score = max(best_score, score)
    return best_score


def calculate_features(ciphertext):
    ciphertext = map_text_into_numspace(ciphertext,ALPHABET,UNKNOWN_SYMBOL_NUMBER)

    nums = [int(c) for c in ciphertext]

    ioc_of_unigram  = calculate_index_of_coincidence(nums)
    ioc_of_digrams = calculate_digraphic_index_of_coincidence(nums)
    has_j = has_letter_j(nums)
    # has_h = has_hash(nums)
    # has_sp = has_space(nums)
    has_x = has_letter_x(nums)
    has_0 = has_digit_0(nums)
    # mic = calculate_maximum_index_of_coincidence(nums)
    # mka = calculate_max_kappa(nums)
    ldi = calculate_log_digraph_score(nums)
    rod, lr = calculate_rod_lr(nums)
    # nomor = calculate_normal_order(frequencies[0:26])
    nic = calculate_nic(nums)
    sdd = calculate_sdd(nums)
    # ptx = calculate_ptx(nums)
    phic = calculate_phic(ciphertext)
    bdi = calculate_bdi(nums)
    # ldi_stats = calculate_ldi_stats(nums)
    # frequency_uni = calculate_frequencies(nums, 1, recursive=True)
    # frequency_bi = calculate_frequencies(nums, 2, recursive=True)
    # print(ioc_of_unigram, ioc_of_digrams,frequency_uni,frequency_bi)
    return [ioc_of_unigram] +  [ioc_of_digrams]  + [has_0] + [has_j] + [has_x] + [rod] + [lr] + [sdd] + [ldi]  + [phic] + [bdi]  + [nic] 
    ...

# a = b'JFALCJPJISXKPYSJVSNNSAHPTCUPSXULXOLMMSRTUUARJAOSJFTJFTJHPTYAMMSXRLHEIAXLYAMMPERRIPQAOIAYLMMRSXAQACUL'
# f = calculate_features(a)
# print(len(f))

def create_feature_data():
    print("Calculating Features")
    labels = []
    features = []
    with open('./ciphertexts/ciphertexts.csv','r') as ciphertextfile:
        reader = csv.reader(ciphertextfile)
        for row in reader:
            l = row[1]
            f = calculate_features(row[0].encode())
            labels.append(l)
            features.append(f)
    with open('./dataset/dataset.csv','w',newline="\n") as csvfile:
        csv_writer = csv.writer(csvfile)
        for f,l in zip(features,labels):
            csv_writer.writerow(f+[l])

    
    # print(feature + label)
def main():
    create_feature_data()

if __name__ == "__main__":
    main()